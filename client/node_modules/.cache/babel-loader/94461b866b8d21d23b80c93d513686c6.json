{"ast":null,"code":"import { API_URL } from \"./consts\";\n\nconst originalRequest = async (url, config) => {\n  url = `${API_URL}${url}`;\n  const response = await fetch(url, { ...config,\n    credentials: 'include',\n    redirect: 'follow'\n  });\n  const data = await response.json();\n  return {\n    response,\n    data\n  };\n};\n\nconst refreshToken = async type => {\n  const response = await fetch(`${API_URL}/user/refresh`, {\n    method: 'GET',\n    credentials: 'include',\n    redirect: 'follow',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  localStorage.setItem('accessToken', data.accessToken);\n  return data;\n};\n\nconst customFetcher = async (url, config, type) => {\n  let accessToken = localStorage.getItem('accessToken') ?? null;\n  config['headers'] = { ...config['headers'],\n    Authorization: `Bearer ${accessToken}`\n  };\n  let {\n    response,\n    data\n  } = await originalRequest(url, config);\n\n  if (response.status === 401 && response.message === 'Refresh token is empty') {}\n\n  console.log(response.status);\n\n  if (response.status === 401) {\n    response = await refreshToken(type);\n    config['headers'] = {\n      Authorization: `Bearer ${response.accessToken}`\n    };\n    const newResponse = await originalRequest(url, config);\n    response = newResponse.response;\n    data = newResponse.data;\n  }\n\n  return {\n    response,\n    data\n  };\n};\n\nexport default customFetcher;","map":{"version":3,"sources":["/Users/apple/Desktop/roku-streaming/client/src/utils/fetchIntercept.js"],"names":["API_URL","originalRequest","url","config","response","fetch","credentials","redirect","data","json","refreshToken","type","method","headers","console","log","localStorage","setItem","accessToken","customFetcher","getItem","Authorization","status","message","newResponse"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,UAAtB;;AAEA,MAAMC,eAAe,GAAG,OAAOC,GAAP,EAAYC,MAAZ,KAAuB;AAC7CD,EAAAA,GAAG,GAAI,GAAEF,OAAQ,GAAEE,GAAI,EAAvB;AACA,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM,EAChC,GAAGC,MAD6B;AAEhCG,IAAAA,WAAW,EAAE,SAFmB;AAGhCC,IAAAA,QAAQ,EAAE;AAHsB,GAAN,CAA5B;AAKA,QAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,SAAO;AAACL,IAAAA,QAAD;AAAWI,IAAAA;AAAX,GAAP;AACD,CATD;;AAWA,MAAME,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,OAAQ,eAAZ,EAA4B;AACtDY,IAAAA,MAAM,EAAE,KAD8C;AAEtDN,IAAAA,WAAW,EAAE,SAFyC;AAGtDC,IAAAA,QAAQ,EAAE,QAH4C;AAItDM,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,gBAAU;AAFH;AAJ6C,GAA5B,CAA5B;AASA,QAAML,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAQ,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCT,IAAI,CAACU,WAAzC;AACA,SAAOV,IAAP;AACD,CAdD;;AAgBA,MAAMW,aAAa,GAAG,OAAOjB,GAAP,EAAYC,MAAZ,EAAoBQ,IAApB,KAA6B;AACjD,MAAIO,WAAW,GAAGF,YAAY,CAACI,OAAb,CAAqB,aAArB,KAAuC,IAAzD;AACAjB,EAAAA,MAAM,CAAC,SAAD,CAAN,GAAoB,EAClB,GAAGA,MAAM,CAAC,SAAD,CADS;AAElBkB,IAAAA,aAAa,EAAG,UAASH,WAAY;AAFnB,GAApB;AAIA,MAAI;AAACd,IAAAA,QAAD;AAAWI,IAAAA;AAAX,MAAmB,MAAMP,eAAe,CAACC,GAAD,EAAMC,MAAN,CAA5C;;AACA,MAAIC,QAAQ,CAACkB,MAAT,KAAoB,GAApB,IAA2BlB,QAAQ,CAACmB,OAAT,KAAqB,wBAApD,EAA6E,CAE5E;;AACDT,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACkB,MAArB;;AACA,MAAGlB,QAAQ,CAACkB,MAAT,KAAoB,GAAvB,EAA2B;AACzBlB,IAAAA,QAAQ,GAAG,MAAMM,YAAY,CAACC,IAAD,CAA7B;AACAR,IAAAA,MAAM,CAAC,SAAD,CAAN,GAAoB;AAClBkB,MAAAA,aAAa,EAAG,UAASjB,QAAQ,CAACc,WAAY;AAD5B,KAApB;AAIA,UAAMM,WAAW,GAAG,MAAMvB,eAAe,CAACC,GAAD,EAAMC,MAAN,CAAzC;AACAC,IAAAA,QAAQ,GAAGoB,WAAW,CAACpB,QAAvB;AACAI,IAAAA,IAAI,GAAGgB,WAAW,CAAChB,IAAnB;AACD;;AAED,SAAO;AAACJ,IAAAA,QAAD;AAAWI,IAAAA;AAAX,GAAP;AACD,CAvBD;;AAyBA,eAAeW,aAAf","sourcesContent":["import {API_URL} from \"./consts\"\r\n\r\nconst originalRequest = async (url, config) => {\r\n  url = `${API_URL}${url}`\r\n  const response = await fetch(url, {\r\n    ...config,\r\n    credentials: 'include',\r\n    redirect: 'follow'\r\n  })\r\n  const data = await response.json()\r\n  return {response, data}\r\n}\r\n\r\nconst refreshToken = async (type) => {\r\n  const response = await fetch(`${API_URL}/user/refresh`, {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    redirect: 'follow',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    }\r\n  })\r\n  const data = await response.json()\r\n  console.log(data)\r\n  localStorage.setItem('accessToken', data.accessToken)\r\n  return data\r\n}\r\n\r\nconst customFetcher = async (url, config, type) => {\r\n  let accessToken = localStorage.getItem('accessToken') ?? null\r\n  config['headers'] = {\r\n    ...config['headers'],\r\n    Authorization: `Bearer ${accessToken}`\r\n  }\r\n  let {response, data} = await originalRequest(url, config)\r\n  if (response.status === 401 && response.message === 'Refresh token is empty'){\r\n\r\n  }\r\n  console.log(response.status)\r\n  if(response.status === 401){\r\n    response = await refreshToken(type)\r\n    config['headers'] = {\r\n      Authorization: `Bearer ${response.accessToken}`\r\n    }\r\n\r\n    const newResponse = await originalRequest(url, config)\r\n    response = newResponse.response\r\n    data = newResponse.data\r\n  }\r\n\r\n  return {response, data}\r\n}\r\n\r\nexport default customFetcher\r\n"]},"metadata":{},"sourceType":"module"}